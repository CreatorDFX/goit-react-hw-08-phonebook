{"version":3,"file":"static/js/259.14190454.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","redux/contacts/selectors.js","components/Filter/Filter.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactListItem.jsx","components/ContactList/ContactList.jsx","pages/Contacts.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"formName\":\"ContactForm_formName__9bHzl\",\"formNumber\":\"ContactForm_formNumber__UMrmC\",\"formBtn\":\"ContactForm_formBtn__qZGY3\"};","import css from './ContactForm.module.css';\nimport React, { useState } from 'react';\nimport { useAddContactMutation, useFetchContactsQuery } from \"redux/contacts/api\";\n\nexport const ContactForm = () => {\n    const { data: contacts } = useFetchContactsQuery();\n\n    // const [trigger, { contacts }] = useLazyFetchContactsQuery();\n    // useEffect(() => {\n    //     trigger({ contacts });\n    // }, [])\n\n    const [addContact] = useAddContactMutation();\n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n\n    const handleChange = e => {\n        const { name, value } = e.currentTarget;\n        switch (name) {\n            case 'name':\n                setName(value);\n                break;\n            case 'number':\n                setNumber(value)\n                break;\n            default:\n                return\n        }\n    }\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        const findContact = contacts.find(contact => contact.name === name);\n        if (findContact) {\n            alert(findContact.name + \" is already in contacts.\")\n            return;\n        }\n        addContact({ name, number });\n        e.target.reset();\n    }\n\n\n    return (\n        <form className={css.form} onSubmit={handleSubmit}>\n            <label className={css.formLabel}>Name\n                <input className={css.formName}\n                    type=\"text\"\n                    name=\"name\"\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                    onChange={handleChange}\n                    required\n                />\n            </label>\n\n            <label className={css.formLabel}>Number\n                <input className={css.formNumber}\n                    type=\"tel\"\n                    name=\"number\"\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                    title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                    onChange={handleChange}\n                    required\n                />\n            </label>\n            <button className={css.formBtn} type='submit'> Add contact</button>\n        </form>\n    )\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"filterName\":\"Filter_filterName__Y2kKA\"};","export const getFilter = state => state.filters;\nexport const selectFetchContacts = (state) => state.contacts;\n","import { useDispatch, useSelector } from 'react-redux';\nimport css from './Filter.module.css';\nimport { getFilter } from 'redux/contacts/selectors';\nimport { setContactsFilter } from 'redux/contacts/filterSlice';\n\nexport const Filter = () => {\n    const filter = useSelector(getFilter);\n    const dispatch = useDispatch();\n    const onChange = (e) => dispatch(setContactsFilter(e.target.value));\n\n    return <div>\n        <label className={css.filterLabel}>Find contacts by name</label>\n        <input className={css.filterName}\n            type=\"text\"\n            name=\"filter\"\n            value={filter}\n            onChange={onChange}\n        />\n    </div>\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"contactListItemBtn\":\"ContactList_contactListItemBtn__TXYnT\",\"contactList\":\"ContactList_contactList__UFVCg\",\"upd\":\"ContactList_upd__n7RCM\"};","import { useDeleteContactMutation, useUpdateContactMutation } from \"redux/contacts/api\";\nimport React, { useState } from 'react';\nimport css from './ContactList.module.css';\n\nexport const ContactListItem = ({ contact, isBlock, setIsBlock, contacts }) => {\n    const { id } = contact;\n    const [isModify, setIsModify] = useState(false);\n    const [name, setName] = useState(contact.name);\n    const [number, setNumber] = useState(contact.number);\n    const [deleteContact] = useDeleteContactMutation();\n    const [updateContact] = useUpdateContactMutation();\n\n    const handleChange = e => {\n        const { name, value } = e.currentTarget;\n        switch (name) {\n            case 'name':\n                setName(value);\n                break;\n            case 'number':\n                setNumber(value)\n                break;\n            default:\n                return\n        }\n    }\n\n    const handleSubmit = e => {\n        e.preventDefault();\n\n        const findContact = contacts.find(contact => contact.name === name);\n        if (findContact) {\n            alert(findContact.name + \" is already in contacts.\")\n            return;\n        } else {\n            updateContact({ id, name, number });\n            setIsModify(false);\n            setIsBlock(false);\n        }\n        e.target.reset();\n    }\n\n    return (\n        <>\n            {!isModify ?\n                <>\n                    {!isBlock &&\n                        <button disabled={isBlock}\n                            type='button'\n                            className={css.contactListItemBtn}\n                            onClick={() => {\n                                setIsModify(true);\n                                setIsBlock(true);\n                            }}>Update</button>}\n                    {!isBlock &&\n                        <button\n                            disabled={isBlock}\n                            type='button'\n                            className={css.contactListItemBtn}\n                            onClick={() => {\n                                deleteContact(contact.id)\n                            }}>Delete</button>}\n                    {contact.name} : {contact.number}\n                </>\n                : <form\n                    className={css.form}\n                    style={{\n                        border: '10px solid teal',\n                        width: '387px',\n                        padding: '20px 20px 20px 20px',\n                        marginBottom: '20px',\n                        marginTop: '20px'\n                    }}\n                    onSubmit={handleSubmit}>\n                    Name <input\n                        className={css.upd}\n                        type=\"text\"\n                        name=\"name\"\n                        onChange={handleChange}\n                        defaultValue={contact.name} />\n                    Number\n                    <input className={css.upd}\n                        type=\"text\"\n                        name=\"number\"\n                        onChange={handleChange}\n                        defaultValue={contact.number} />\n\n                    <button\n                        type='submit'\n                        className={css.contactListItemBtn}\n                    >Update</button>\n\n                    <button\n                        type='button'\n                        className={css.contactListItemBtn}\n                        onClick={() => {\n                            setIsBlock(false);\n                            setIsModify(false)\n                        }}>Cancel</button>\n                </form>\n            }\n        </>\n    )\n}","import css from './ContactList.module.css';\nimport { useSelector } from 'react-redux';\nimport React, { useState } from 'react';\nimport { getFilter } from 'redux/contacts/selectors';\nimport { useFetchContactsQuery } from \"redux/contacts/api\";\nimport { Oval } from 'react-loader-spinner';\nimport { ContactListItem } from './ContactListItem'\n\n\nexport const ContactList = () => {\n    const [isBlock, setIsBlock] = useState(false);\n    const filter = useSelector(getFilter);\n    const { data: contacts = [], isFetching } = useFetchContactsQuery();\n\n    const getVisibleContacts = () => {\n        const normalizedFilter = filter.toLowerCase();\n        return contacts.filter(contact => contact.name.toLowerCase().includes(normalizedFilter));\n    }\n\n    return (<div className={css.wraperContactList}>\n        <ul className={css.contactList}>\n            {isFetching ? <Oval\n                height=\"40\"\n                width=\"40\"\n                radius=\"9\"\n                color=\"#000000\"\n                ariaLabel=\"three-dots-loading\"\n                visible={true}\n            /> : getVisibleContacts().map((contact, index) => (\n                <li key={index} className={css.contactListItem}>\n                    <ContactListItem\n                        contact={contact}\n                        isBlock={isBlock}\n                        setIsBlock={setIsBlock}\n                        contacts={getVisibleContacts()}\n                    />\n                </li>\n\n            ))}\n        </ul>\n    </div>)\n}","// import { Helmet } from 'react-helmet';\nimport { ContactForm } from 'components/ContactForm/ContactForm.jsx';\nimport { Filter } from 'components/Filter/Filter.jsx';\nimport { ContactList } from 'components/ContactList/ContactList.jsx';\n\nexport default function Contacts() {\n\n    return (\n        <>\n            {/* <Helmet>\n                <title>Your contacts</title>\n            </Helmet> */}\n            <div\n                style={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                    justifyContent: 'center',\n                    alignItems: 'center',\n                    fontSize: 20,\n                    color: '#010101',\n                }}\n            >\n\n                <h1>Phonebook</h1>\n                <ContactForm />\n                <h1>Contacts</h1>\n                <Filter />\n                <ContactList />\n            </div >\n        </>\n    );\n}\n"],"names":["ContactForm","contacts","useFetchContactsQuery","data","useAddContactMutation","addContact","useState","name","setName","number","setNumber","handleChange","e","currentTarget","value","className","css","onSubmit","preventDefault","findContact","find","contact","alert","target","reset","type","pattern","title","onChange","required","getFilter","state","filters","Filter","filter","useSelector","dispatch","useDispatch","setContactsFilter","ContactListItem","isBlock","setIsBlock","id","isModify","setIsModify","useDeleteContactMutation","deleteContact","useUpdateContactMutation","updateContact","style","border","width","padding","marginBottom","marginTop","defaultValue","onClick","disabled","ContactList","isFetching","getVisibleContacts","normalizedFilter","toLowerCase","includes","height","radius","color","ariaLabel","visible","map","index","Contacts","display","flexDirection","justifyContent","alignItems","fontSize"],"sourceRoot":""}